/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package assignment.three;

import java.util.ArrayList;
import java.util.Map;

public class FruitMachine implements FruitMachineInterface {

    private static final int STARTING_BALANCE = 100;
    private static final int JOKER_MULTIPLIER = -25;
    private static final int NUMBER_OF_SPINNERS = 3;

    // Add observers for different types of state change within the model
    private final ArrayList<BalanceObserver> balanceObservers = new ArrayList<BalanceObserver>();
    private final ArrayList<SpinnerSetObserver> spinnerSetObservers =
            new ArrayList<SpinnerSetObserver>();
    private final ArrayList<GameStateObserver> gameStateObservers =
            new ArrayList<GameStateObserver>();

    private Payouts payouts;
    private final Balance playerBalance;
    private final SpinnerSet spinners;
    private GameState gameState;

    public static void main(final String[] args) {

        // Create the winning payouts
        final Payouts payouts = new Payouts();
        payouts.addPayout(1, 0);
        payouts.addPayout(2, 20);
        payouts.addPayout(3, 50);

        final FruitMachine fruitMachineModel = new FruitMachine();
        fruitMachineModel.setPayouts(payouts);

        // Hook up MVC here.
        FruitMachineController fruitMachineController =
                new FruitMachineController(fruitMachineModel);

        FruitMachineView fruitMachineView = new FruitMachineView(fruitMachineController);
        fruitMachineController.addView(fruitMachineView);
    }

    // Constructor
    public FruitMachine() {

        // Create spinners
        spinners = new SpinnerSet(NUMBER_OF_SPINNERS);

        // Create player balance (initially 0)
        playerBalance = new Balance();

        // Initialise all values
        reset();
    }

    public void reset() {
        // Reset game state
        setGameState(GameState.PLAY);

        // Reset balance
        playerBalance.setBalance(STARTING_BALANCE);
        notifyBalanceObservers();
    }

    // Game Logic
    public void spin() {
        if (gameState == GameState.PLAY) {
            spinners.spin();
            notifySpinnerObservers();
            updatePlayerBalance();
        }
    }

    private void setGameState(final GameState gameState) {
        this.gameState = gameState;
        notifyGameStateObservers();
    }

    private void updatePlayerBalance() {
        System.out.println(spinners.getCardCounts());
        // Get the balance change from the card counts
        final int balanceChange = calculateBalanceChange(spinners.getCardCounts());

        // Don't update anything if there's no change.
        if (balanceChange != 0) {
            final int newBalance = playerBalance.change(balanceChange);
            notifyBalanceObservers();

            if (newBalance <= 0) {
                setGameState(GameState.LOST);
            } else if (newBalance >= 150) {
                setGameState(GameState.WON);
            }
        }
    }

    private int calculateBalanceChange(final Map<Card, Integer> cardMap) {
        // If there's a JOKER in the card map
        if (cardMap.keySet().contains(Card.JOKER)) {
            // Get its value and multiply it by the value (normally negative)
            return cardMap.get(Card.JOKER) * JOKER_MULTIPLIER;
        } else {
            return payouts.getPayout(spinners.getMaxCardCount());
        }
    }

    @Override
    public void setPayouts(final Payouts payouts) {
        this.payouts = payouts;

    }

    @Override
    public Card[] getCards() {
        return spinners.getCards();
    }

    @Override
    public int getSpinnerCount() {
        return spinners.getSpinnerCount();
    }

    @Override
    public GameState getGameState() {
        return gameState;
    }

    @Override
    public int getBalance() {
        return playerBalance.getBalance();
    }

    @Override
    public void registerObserver(final GameStateObserver o) {
        gameStateObservers.add(o);

    }

    @Override
    public void registerObserver(final BalanceObserver o) {
        balanceObservers.add(o);

    }

    @Override
    public void registerObserver(final SpinnerSetObserver o) {
        spinnerSetObservers.add(o);

    }

    private void notifyBalanceObservers() {
        balanceObservers.forEach(o -> o.updateBalance());
    }

    private void notifySpinnerObservers() {
        spinnerSetObservers.forEach(o -> o.updateSpinners());
    }

    private void notifyGameStateObservers() {
        gameStateObservers.forEach(o -> o.updateGameState());
    }

}
